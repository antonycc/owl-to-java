package uk.co.polycode.owltojava.test

import org.simpleframework.xml.core.Persister
import uk.co.polycode.owltojava.*
import uk.co.polycode.owltojava.rdf.RdfDocument
import java.io.BufferedReader
import java.math.BigDecimal
import java.math.BigInteger
import java.net.URL
import java.nio.file.Paths
import java.time.ZonedDateTime
import kotlin.test.*

/**
 * OWL to Java generates Source Code from the W3C Web Ontology Language (OWL)
 * Copyright (C) 2022  Antony Cartwright, Polycode Limited
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0 for more details.
 */
internal class SourceWriterTest {

    private val srcTestResources = "./src/test/resources"
    private val minimalOwlFilePath = Paths.get("${srcTestResources}/schemaorg-minimal-person.owl")
    private val rdfDocument: RdfDocument = with(minimalOwlFilePath.toFile()){
        Persister().read(RdfDocument::class.java, this, false)
    }
    private val javaSourceDirectoryPath = Paths.get("./build/generated-sources-writer")
    private val javaBasePackage = "uk.co.polycode"
    private val licenceText = """
        This file was generated by OWL to Java as a transformation of the Schema.org schema Version 14.0.
        Schema.org is released under the Creative Commons Attribution-ShareAlike License (version 3.0). 
        The Schema.org license is applicable to the generated source files and the license is available from 
        https://creativecommons.org/licenses/by-sa/3.0/
        """.trimIndent()
    private val lang = "en"
    private val classes = listOf(
        "https://schema.org/Person",
        "https://schema.org/City",
        "https://schema.org/Place",
        "https://schema.org/Corporation",
        "https://schema.org/Project",
        "https://schema.org/Book",
        "https://schema.org/Article",
        "https://example.com/NoLang",
        "https://schema.org/Fake"
    )
    private val primitivePropertyTypes = mapOf(
        "https://schema.org/DataType" to Object::class.java.name,
        "https://schema.org/Text"     to String::class.java.name,
        "https://schema.org/Time"     to ZonedDateTime::class.java.name,
        "https://schema.org/DateTime" to ZonedDateTime::class.java.name,
        "https://schema.org/Date"     to ZonedDateTime::class.java.name,
        "https://schema.org/URL"      to URL::class.java.name,
        "https://schema.org/Integer"  to BigInteger::class.java.name,
        "https://schema.org/Float"    to BigDecimal::class.java.name,
        "https://schema.org/Number"   to BigDecimal::class.java.name,
        "https://schema.org/Boolean"  to "java.lang.Boolean", // Boolean::class.java.name, unboxes to boolean.
    )
    private val ignoredPropertyTypes = listOf(
        "https://schema.org/Role"
    )
    private val prunedPropertyTypes = listOf(
        "https://schema.org/Text",
        "https://schema.org/URL"
    )
    private val ignoredSuperclasses = listOf(
        "http://www.w3.org/2000/01/rdf-schema#Class"
    )
    private val owlParser = OwlParser(rdfDocument = rdfDocument)
    private val javaSourceBuilder = JavaSourceBuilder(javaBasePackage = javaBasePackage).also {
        it.primitivePropertyTypes = this.primitivePropertyTypes
    }

    @Test
    fun testJavaSourceFileInOutput() {

        // Expected results
        val expectedClassName = "QuantitativeValue"
        val expectedSuperclassName = "StructuredValue"
        val expectedOutputFilePath = "${javaSourceDirectoryPath}/uk/co/polycode/org/schema/${expectedClassName}.java"
        val expectedOutputFile = Paths.get(expectedOutputFilePath).toFile()

        // Setup
        val ontologyClasses = owlParser.also {
            it.classes = this.classes
            it.ignoredPropertyTypes = this.ignoredPropertyTypes
            it.prunedPropertyTypes = this.prunedPropertyTypes
        }
            .buildMapOfClassesToFieldLists()
            .filter { it.key.id !in primitivePropertyTypes.keys }
        val javaSourceBuilder = JavaSourceBuilder(javaBasePackage = javaBasePackage).also {
            it.lang = this.lang
            it.licenceText = this.licenceText
            it.desiredClasses = this.classes
            it.primitivePropertyTypes = this.primitivePropertyTypes
            it.prunedPropertyTypes = this.prunedPropertyTypes
            it.ignoredSuperclasses = this.ignoredSuperclasses
        }

        // Execution
        // TODO: Move to companion object for static invocation
        JavaSourceWriter().writeClassMapAsJavaSource(
            javaSourceDirectoryPath.toFile().absolutePath,
            javaSourceDirectoryPath.toFile(),
            ontologyClasses,
            javaSourceBuilder
        )

        // Class validation
        assertTrue(expectedOutputFile.exists())
        val bufferedReader: BufferedReader = expectedOutputFile.bufferedReader()
        val javaSourceFile = bufferedReader.use { it.readText() }
        assertTrue { javaSourceFile.contains("public class ${expectedClassName}") }
        assertTrue {
            javaSourceFile.contains(
                "public class ${expectedClassName} extends ${expectedSuperclassName} {"
            )
        }
        assertTrue {
            javaSourceFile.contains(
                "public String isDefinedBy = \"https://schema.org/${expectedClassName}\";"
            )
        }
        assertTrue { javaSourceFile.contains("public String unitCode;") }
        assertTrue { javaSourceFile.contains("public PropertyValue additionalProperty;") }
        assertTrue { javaSourceFile.contains("public BigDecimal value;") }
        assertTrue { javaSourceFile.contains("public StructuredValue valueStructuredValue;") }
    }

    @Test
    fun testJavaSourceFileWithDefaults() {

        // Expected results
        val expectedClassName = "QuantitativeValue"
        val expectedSuperclassName = "StructuredValue"
        val expectedOutputFilePath = "${javaSourceDirectoryPath}/uk/co/polycode/org/schema/${expectedClassName}.java"
        val expectedOutputFile = Paths.get(expectedOutputFilePath).toFile()

        // Setup
        val ontologyClasses = owlParser
            .buildMapOfClassesToFieldLists()
            .filter { it.key.id !in primitivePropertyTypes.keys }

        // Execution
        // TODO: Move to companion object for static invocation
        JavaSourceWriter().writeClassMapAsJavaSource(
            javaSourceDirectoryPath.toFile().absolutePath,
            javaSourceDirectoryPath.toFile(),
            ontologyClasses,
            javaSourceBuilder
        )

        // Class validation
        assertTrue(expectedOutputFile.exists())
        val bufferedReader: BufferedReader = expectedOutputFile.bufferedReader()
        val javaSourceFile = bufferedReader.use { it.readText() }
        assertTrue { javaSourceFile.contains("public class ${expectedClassName}") }
        assertTrue {
            javaSourceFile.contains(
                "public class ${expectedClassName} extends ${expectedSuperclassName} {"
            )
        }
        assertTrue {
            javaSourceFile.contains(
                "public String isDefinedBy = \"https://schema.org/${expectedClassName}\";"
            )
        }
        assertTrue { javaSourceFile.contains("public String unitCodeString;") }
        assertTrue { javaSourceFile.contains("public PropertyValue additionalProperty;") }
        assertTrue { javaSourceFile.contains("public String value;") }
        assertTrue { javaSourceFile.contains("public StructuredValue valueStructuredValue;") }
    }
}
