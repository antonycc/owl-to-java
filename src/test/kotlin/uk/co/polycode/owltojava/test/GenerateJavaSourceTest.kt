package uk.co.polycode.owltojava.test

import org.simpleframework.xml.core.Persister
import uk.co.polycode.owltojava.JavaSourceBuilder
import uk.co.polycode.owltojava.OwlParser
import uk.co.polycode.owltojava.rdf.RdfDocument
import java.math.BigDecimal
import java.math.BigInteger
import java.net.URI
import java.net.URL
import java.nio.file.Paths
import java.time.ZonedDateTime
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertNotNull
import kotlin.test.assertTrue

/**
 * OWL to Java generates Source Code from the W3C Web Ontology Language (OWL)
 * Copyright (C) 2022  Antony Cartwright, Polycode Limited
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Mozilla Public License, v. 2.0 for more details.
 */
internal class GenerateJavaSourceTest {

    private val srcTestResources = "./src/test/resources"
    private val minimalOwlFilePath = Paths.get("${srcTestResources}/schemaorg-minimal-person.owl")
    private val skeletonOwlFilePath = Paths.get("${srcTestResources}/schemaorg-skeleton.owl")
    private val javaBasePackage = "uk.co.polycode"
    private val licenceText = """
        This file was generated by OWL to Java as a transformation of the Schema.org schema Version 14.0.
        Schema.org is released under the Creative Commons Attribution-ShareAlike License (version 3.0). 
        The Schema.org license is applicable to the generated source files and the license is available from 
        https://creativecommons.org/licenses/by-sa/3.0/
        """.trimIndent()
    private val lang = "en"
    private val classes = listOf(
        "https://schema.org/Person",
        "https://schema.org/City",
        "https://schema.org/Place",
        "https://schema.org/Corporation",
        "https://schema.org/Project",
        "https://schema.org/Book",
        "https://schema.org/Article",
        "https://example.com/NoLang",
        "https://schema.org/Fake"
    )
    private val primitivePropertyTypes = mapOf(
        "https://schema.org/DataType" to Object::class.java.name,
        "https://schema.org/Text"     to String::class.java.name,
        "https://schema.org/Time"     to ZonedDateTime::class.java.name,
        "https://schema.org/DateTime" to ZonedDateTime::class.java.name,
        "https://schema.org/Date"     to ZonedDateTime::class.java.name,
        "https://schema.org/URL"      to URL::class.java.name,
        "https://schema.org/Integer"  to BigInteger::class.java.name,
        "https://schema.org/Float"    to BigDecimal::class.java.name,
        "https://schema.org/Number"   to BigDecimal::class.java.name,
        "https://schema.org/Boolean"  to "java.lang.Boolean", // Boolean::class.java.name, unboxes to boolean.
    )
    private val ignoredPropertyTypes = listOf(
        "https://schema.org/Role"
    )
    private val prunedPropertyTypes = listOf(
        "https://schema.org/Text",
        "https://schema.org/URL"
    )
    private val ignoredSuperclasses = listOf(
        "http://www.w3.org/2000/01/rdf-schema#Class"
    )

    @Test
    fun testExpectClassNameFromPath() {

        // Expected results
        val expectedClassName = "Person"

        // Setup

        // Execution
        val actualClassName = JavaSourceBuilder.classNameForPath(expectedClassName)
        val actualClassNameConverted = JavaSourceBuilder.toTitleCase(actualClassName.uppercase())

        // Validation
        assertTrue { actualClassName.contains(expectedClassName) }
        assertEquals(actualClassNameConverted, expectedClassName)
    }

    @Test
    fun testExpectClassNameFromId() {

        // Expected results
        val expectedClassName = "Person"
        val expectedSuperclassName = "Thing"

        // Setup
        val rdfDocument: RdfDocument = with(skeletonOwlFilePath.toFile()){
            Persister().read(RdfDocument::class.java, this, false)
        }
        val owlParser = OwlParser(rdfDocument = rdfDocument).also {
            it.lang = this.lang
            it.classes = this.classes
            it.ignoredPropertyTypes = this.ignoredPropertyTypes
            it.prunedPropertyTypes = this.prunedPropertyTypes
        }

        // Execution
        val ontologyClasses = owlParser.buildClassMap().filter { it.key.id !in primitivePropertyTypes.keys }
        val owlExpectedClass = ontologyClasses.keys.firstOrNull { it.id.contains(expectedClassName) }
        val owlExpectedProperties = ontologyClasses[owlExpectedClass]
        assertNotNull(owlExpectedClass)
        assertNotNull(owlExpectedProperties)
        val actualClassName = JavaSourceBuilder.classNameForUri(URI(owlExpectedClass.id))
        val actualSuperClassIds = owlExpectedClass.subClassesOf?.map {it.resource} ?: emptyList()
        val actualSuperclassName = JavaSourceBuilder.classNameForUri(URI(actualSuperClassIds.firstOrNull() ?: ""))

        // Validation
        assertTrue { actualClassName.contains(expectedClassName) }
        assertTrue { actualSuperclassName.contains(expectedSuperclassName) }
    }

    @Test
    fun testExpectClassToBeGenerated() {

        // Expected results
        val expectedClass = "Person"
        val expectedClassLabel = "A person (alive, dead, undead, or fictional)."

        // Setup
        val rdfDocument: RdfDocument = with(minimalOwlFilePath.toFile()){
            Persister().read(RdfDocument::class.java, this, false)
        }
        val owlParser = OwlParser(rdfDocument = rdfDocument).also {
            it.ignoredPropertyTypes = this.ignoredPropertyTypes
            it.prunedPropertyTypes = this.prunedPropertyTypes
        }
        val javaSourceBuilder = JavaSourceBuilder(javaBasePackage = javaBasePackage).also {
            it.lang = this.lang
            it.licenceText = this.licenceText
            it.desiredClasses = this.classes
            it.primitivePropertyTypes = this.primitivePropertyTypes
            it.prunedPropertyTypes = this.prunedPropertyTypes
            it.ignoredSuperclasses = this.ignoredSuperclasses
        }

        // Execution
        val ontologyClasses = owlParser.buildClassMap().filter { it.key.id !in primitivePropertyTypes.keys }
        val owlExpectedClass = ontologyClasses.keys.firstOrNull { it.id.contains(expectedClass)}
        val owlExpectedProperties = ontologyClasses[owlExpectedClass]
        assertNotNull(owlExpectedClass)
        assertNotNull(owlExpectedProperties)
        val javaSource = javaSourceBuilder.build(owlExpectedClass, owlExpectedProperties)

        // Validation
        assertTrue { javaSource.isNotBlank() && javaSource.contains("public class ${expectedClass}") }
        assertTrue { javaSource.isNotBlank() && javaSource.contains(expectedClassLabel) }
    }

    @Test
    fun testExpectClassToBeGeneratedWithDefaults() {

        // Expected results
        val expectedClass = "Person"
        val expectedClassLabel = "A person (alive, dead, undead, or fictional)."

        // Setup
        val rdfDocument: RdfDocument = with(minimalOwlFilePath.toFile()){
            Persister().read(RdfDocument::class.java, this, false)
        }
        val owlParser = OwlParser(rdfDocument = rdfDocument).also {
            it.ignoredPropertyTypes = this.ignoredPropertyTypes
            it.prunedPropertyTypes = this.prunedPropertyTypes
        }
        val javaSourceBuilder = JavaSourceBuilder(javaBasePackage = javaBasePackage)

        // Execution
        val ontologyClasses = owlParser.buildClassMap().filter { it.key.id !in primitivePropertyTypes.keys }
        val owlExpectedClass = ontologyClasses.keys.firstOrNull { it.id.contains(expectedClass)}
        val owlExpectedProperties = ontologyClasses[owlExpectedClass]
        assertNotNull(owlExpectedClass)
        assertNotNull(owlExpectedProperties)
        val javaSource = javaSourceBuilder.build(owlExpectedClass, owlExpectedProperties)

        // Validation
        assertTrue { javaSource.isNotBlank() && javaSource.contains("public class ${expectedClass}") }
        assertTrue { javaSource.isNotBlank() && javaSource.contains(expectedClassLabel) }
    }

    @Test
    fun testExpectNoLangClassToBeGenerated() {

        // Expected results
        val expectedClass = "NoLang"

        // Setup
        val rdfDocument: RdfDocument = with(minimalOwlFilePath.toFile()){
            Persister().read(RdfDocument::class.java, this, false)
        }
        val owlParser = OwlParser(rdfDocument = rdfDocument).also {
            it.lang = this.lang
        }
        val javaSourceBuilder = JavaSourceBuilder(javaBasePackage = javaBasePackage).also {
            it.lang = this.lang
        }

        // Execution
        val ontologyClasses = owlParser.buildClassMap().filter { it.key.id !in primitivePropertyTypes.keys }
        val owlExpectedClass = ontologyClasses.keys.firstOrNull { it.id.contains(expectedClass)}
        val owlExpectedProperties = ontologyClasses[owlExpectedClass]
        assertNotNull(owlExpectedClass)
        assertNotNull(owlExpectedProperties)
        val javaSource = javaSourceBuilder.build(owlExpectedClass, owlExpectedProperties)

        // Validation
        assertTrue { javaSource.isNotBlank() && javaSource.contains("public class ${expectedClass}") }
    }

    @Test
    fun testExpectThingWithNoLangClassToBeGenerated() {

        // Expected results
        val expectedClass = "Thing"

        // Setup
        val rdfDocument: RdfDocument = with(minimalOwlFilePath.toFile()){
            Persister().read(RdfDocument::class.java, this, false)
        }
        val owlParser = OwlParser(rdfDocument = rdfDocument).also {
            it.lang = this.lang
        }
        val javaSourceBuilder = JavaSourceBuilder(javaBasePackage = javaBasePackage).also {
            it.lang = this.lang
        }

        // Execution
        val ontologyClasses = owlParser.buildClassMap().filter { it.key.id !in primitivePropertyTypes.keys }
        val owlExpectedClass = ontologyClasses.keys.firstOrNull { it.id.contains(expectedClass)}
        val owlExpectedProperties = ontologyClasses[owlExpectedClass]
        assertNotNull(owlExpectedClass)
        assertNotNull(owlExpectedProperties)
        val javaSource = javaSourceBuilder.build(owlExpectedClass, owlExpectedProperties)

        // Validation
        assertTrue { javaSource.isNotBlank() && javaSource.contains("public NoLang nolangproperty;") }
    }
}
